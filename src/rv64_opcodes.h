#pragma once

typedef enum {
    // RV32I/RV64I Base Integer Instructions
    RV_OP_LUI,
    RV_OP_AUIPC,
    RV_OP_JAL,
    RV_OP_JALR,
    RV_OP_BEQ,
    RV_OP_BNE,
    RV_OP_BLT,
    RV_OP_BGE,
    RV_OP_BLTU,
    RV_OP_BGEU,
    RV_OP_LB,
    RV_OP_LH,
    RV_OP_LW,
    RV_OP_LBU,
    RV_OP_LHU,
    RV_OP_SB,
    RV_OP_SH,
    RV_OP_SW,
    RV_OP_ADDI,
    RV_OP_SLTI,
    RV_OP_SLTIU,
    RV_OP_XORI,
    RV_OP_ORI,
    RV_OP_ANDI,
    RV_OP_SLLI,
    RV_OP_SRLI,
    RV_OP_SRAI,
    RV_OP_ADD,
    RV_OP_SUB,
    RV_OP_SLL,
    RV_OP_SLT,
    RV_OP_SLTU,
    RV_OP_XOR,
    RV_OP_SRL,
    RV_OP_SRA,
    RV_OP_OR,
    RV_OP_AND,
    RV_OP_FENCE,
    RV_OP_FENCE_I,
    RV_OP_ECALL,
    RV_OP_EBREAK,
    RV_OP_CSRRW,
    RV_OP_CSRRS,
    RV_OP_CSRRC,
    RV_OP_CSRRWI,
    RV_OP_CSRRSI,
    RV_OP_CSRRCI,
    RV_OP_URET,
    RV_OP_SRET,
    RV_OP_MRET,
    RV_OP_WFI,
    RV_OP_SFENCE_VMA,
    
    // RV64I Instructions
    RV_OP_LWU,
    RV_OP_LD,
    RV_OP_SD,
    RV_OP_ADDIW,
    RV_OP_SLLIW,
    RV_OP_SRLIW,
    RV_OP_SRAIW,
    RV_OP_ADDW,
    RV_OP_SUBW,
    RV_OP_SLLW,
    RV_OP_SRLW,
    RV_OP_SRAW,
    
    // RV32M/RV64M Multiply/Divide Extension
    RV_OP_MUL,
    RV_OP_MULH,
    RV_OP_MULHSU,
    RV_OP_MULHU,
    RV_OP_DIV,
    RV_OP_DIVU,
    RV_OP_REM,
    RV_OP_REMU,
    
    // RV64M Instructions
    RV_OP_MULW,
    RV_OP_DIVW,
    RV_OP_DIVUW,
    RV_OP_REMW,
    RV_OP_REMUW,
    
    // RV32A/RV64A Atomic Extension
    RV_OP_LR_W,
    RV_OP_SC_W,
    RV_OP_AMOSWAP_W,
    RV_OP_AMOADD_W,
    RV_OP_AMOXOR_W,
    RV_OP_AMOAND_W,
    RV_OP_AMOOR_W,
    RV_OP_AMOMIN_W,
    RV_OP_AMOMAX_W,
    RV_OP_AMOMINU_W,
    RV_OP_AMOMAXU_W,
    
    // RV64A Instructions
    RV_OP_LR_D,
    RV_OP_SC_D,
    RV_OP_AMOSWAP_D,
    RV_OP_AMOADD_D,
    RV_OP_AMOXOR_D,
    RV_OP_AMOAND_D,
    RV_OP_AMOOR_D,
    RV_OP_AMOMIN_D,
    RV_OP_AMOMAX_D,
    RV_OP_AMOMINU_D,
    RV_OP_AMOMAXU_D,
    
    // RV32F/RV64F Single-Precision Floating-Point
    RV_OP_FLW,
    RV_OP_FSW,
    RV_OP_FMADD_S,
    RV_OP_FMSUB_S,
    RV_OP_FNMSUB_S,
    RV_OP_FNMADD_S,
    RV_OP_FADD_S,
    RV_OP_FSUB_S,
    RV_OP_FMUL_S,
    RV_OP_FDIV_S,
    RV_OP_FSQRT_S,
    RV_OP_FSGNJ_S,
    RV_OP_FSGNJN_S,
    RV_OP_FSGNJX_S,
    RV_OP_FMIN_S,
    RV_OP_FMAX_S,
    RV_OP_FCVT_W_S,
    RV_OP_FCVT_WU_S,
    RV_OP_FMV_X_W,
    RV_OP_FEQ_S,
    RV_OP_FLT_S,
    RV_OP_FLE_S,
    RV_OP_FCLASS_S,
    RV_OP_FCVT_S_W,
    RV_OP_FCVT_S_WU,
    RV_OP_FMV_W_X,
    
    // RV64F Instructions
    RV_OP_FCVT_L_S,
    RV_OP_FCVT_LU_S,
    RV_OP_FCVT_S_L,
    RV_OP_FCVT_S_LU,
    
    // RV32D/RV64D Double-Precision Floating-Point
    RV_OP_FLD,
    RV_OP_FSD,
    RV_OP_FMADD_D,
    RV_OP_FMSUB_D,
    RV_OP_FNMSUB_D,
    RV_OP_FNMADD_D,
    RV_OP_FADD_D,
    RV_OP_FSUB_D,
    RV_OP_FMUL_D,
    RV_OP_FDIV_D,
    RV_OP_FSQRT_D,
    RV_OP_FSGNJ_D,
    RV_OP_FSGNJN_D,
    RV_OP_FSGNJX_D,
    RV_OP_FMIN_D,
    RV_OP_FMAX_D,
    RV_OP_FCVT_S_D,
    RV_OP_FCVT_D_S,
    RV_OP_FEQ_D,
    RV_OP_FLT_D,
    RV_OP_FLE_D,
    RV_OP_FCLASS_D,
    RV_OP_FCVT_W_D,
    RV_OP_FCVT_WU_D,
    RV_OP_FCVT_D_W,
    RV_OP_FCVT_D_WU,
    
    // RV64D Instructions
    RV_OP_FCVT_L_D,
    RV_OP_FCVT_LU_D,
    RV_OP_FMV_X_D,
    RV_OP_FCVT_D_L,
    RV_OP_FCVT_D_LU,
    RV_OP_FMV_D_X,
    
    // RV32C/RV64C Compressed Instructions
    RV_OP_C_ADDI4SPN,
    RV_OP_C_FLD,
    RV_OP_C_LW,
    RV_OP_C_FLW,
    RV_OP_C_LD,
    RV_OP_C_FSD,
    RV_OP_C_SW,
    RV_OP_C_FSW,
    RV_OP_C_SD,
    RV_OP_C_NOP,
    RV_OP_C_ADDI,
    RV_OP_C_JAL,
    RV_OP_C_ADDIW,
    RV_OP_C_LI,
    RV_OP_C_ADDI16SP,
    RV_OP_C_LUI,
    RV_OP_C_SRLI,
    RV_OP_C_SRAI,
    RV_OP_C_ANDI,
    RV_OP_C_SUB,
    RV_OP_C_XOR,
    RV_OP_C_OR,
    RV_OP_C_AND,
    RV_OP_C_SUBW,
    RV_OP_C_ADDW,
    RV_OP_C_J,
    RV_OP_C_BEQZ,
    RV_OP_C_BNEZ,
    RV_OP_C_SLLI,
    RV_OP_C_FLDSP,
    RV_OP_C_LWSP,
    RV_OP_C_FLWSP,
    RV_OP_C_LDSP,
    RV_OP_C_JR,
    RV_OP_C_MV,
    RV_OP_C_EBREAK,
    RV_OP_C_JALR,
    RV_OP_C_ADD,
    RV_OP_C_FSDSP,
    RV_OP_C_SWSP,
    RV_OP_C_FSWSP,
    RV_OP_C_SDSP,
    
    // Invalid/Unknown instruction
    RV_OP_INVALID
} rv_opcode_t;

// Instruction decode result
typedef struct {
    rv_opcode_t opcode;
    u8 rd;
    u8 rs1;
    u8 rs2;
    u8 rs3;
    s64 imm;
    u32 raw;  // Raw instruction bits
} rv_inst_t;